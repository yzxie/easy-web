{"version":3,"sources":["auth.js","apps/App.js","apps/log-app/components/sider.js","apps/log-app/components/secondFlowChart.js","lib/sockJsClient.js","apps/log-app/index.js","apps/monitor-app/components/sider.js","apps/monitor-app/index.js","apps/chat-app/components/sider.js","apps/chat-app/index.js","apps/common/Login.js","apps/common/Register.js","apps/common/Profile.js","apps/index.js","serviceWorker.js","index.js"],"names":["axios","require","hashHistory","module","exports","login","localStorage","setItem","getIsLogin","getItem","logout","removeItem","handleLogout","method","url","then","res","push","catch","err","console","log","Header","Layout","Content","Footer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLogin","setState","nextProps","accountMenu","react_default","a","createElement","menu","Item","es","to","onClick","layout","className","theme","mode","defaultSelectedKeys","style","lineHeight","key","float","dropdown","overlay","href","icon","type","padding","children","textAlign","Component","SubMenu","Menu","Sider","LogSider","_this$props","logTypeWithApps","changeActiveLogTypeAndApp","width","background","defaultOpenKeys","height","map","logTypeApps","i","title","logType","apps","app","j","e","SecondFlowChart","drawCharts","logs","xData","yData","secondStamp","requestCount","doDrawCharts","option","text","tooltip","legend","data","xAxis","yAxis","series","name","echarts","init","document","getElementById","setOption","id","SockJsClient","_initStompClient","client","Stomp","over","SockJS","options","heartbeat","outgoing","incoming","keys","includes","heartbeatIncoming","heartbeatOutgoing","debug","_cleanUp","connected","retryCount","subscriptions","clear","_log","msg","_subscribe","topic","has","sub","subscribe","onMessage","_processMessage","body","Lo","slice","subscribeHeaders","set","msgBody","JSON","parse","_unsubscribe","get","unsubscribe","delete","_connect","connect","headers","topics","forEach","onConnect","error","stack","onDisconnect","autoReconnect","explicitDisconnect","_timeoutId","setTimeout","getRetryInterval","disconnect","clearTimeout","subid","sendMessage","opt_headers","arguments","length","undefined","Error","send","Map","nextState","_this2","difference","newTopic","oldTopic","React","defaultProps","count","LogIndex","handleLogMessage","serverAppsLogs","appsLogs","index","item","value","appId","activeLogType","activeLogApp","activeDisplayLogs","_this$state","resData","ret","_this3","_this$state2","displayLogs","sider_LogSider","log_app_Content","minHeight","secondFlowChart_SecondFlowChart","sockJsClient","ref","gropClientRef","MonitorSider","sider_Sider","sider_SubMenu","MonitorIndex","sider_MonitorSider","monitor_app_Content","ChatSider","onlines","offlines","chatWith","components_sider_Sider","components_sider_SubMenu","color","online","offline","concat","TextArea","Input","ChatApp","handleGroupMessageReceived","groupMessageReceived","content","handleChatReceived","p2pChatMessageReceived","sendGroupMessage","groupMessage","stringify","sendP2pChatMessage","chatTo","userName","p2pChatClientRef","user","inputP2pChatMessage","target","inputGroupMessage","sider_ChatSider","chat_app_Content","row","gutter","col","span","placeholder","autosize","minRows","maxRows","onChange","es_button","margin","client_default","FormItem","Form","NormalLoginForm","handleSubmit","preventDefault","form","validateFields","values","response","getFieldDecorator","es_form","onSubmit","rules","required","message","input","prefix","valuePropName","initialValue","es_checkbox","htmlType","WrappedNormalLoginForm","create","Option","Select","AutoCompleteOption","AutoComplete","residences","label","RegistrationForm","confirmDirty","autoCompleteResult","validateFieldsAndScroll","handleConfirmBlur","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","handleWebsiteChange","domain","formItemLayout","labelCol","xs","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","es_select","websiteOptions","website","Register_FormItem","assign","whitespace","validator","onBlur","cascader","addonBefore","auto_complete","dataSource","extra","WrappedRegistrationForm","Profile","userInfo","Profile_Content","email","Index","requiredLogin","requiredNotLogin","history","path","component","LogApp","onEnter","MonitorApp","Login","Register","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ec42c0b.chunk.js","sourcesContent":["var axios = require('axios')\nvar hashHistory = require('react-router').hashHistory\nmodule.exports = {\n    \n    login() {\n        localStorage.setItem('isLogin', true)\n    },\n\n    getIsLogin() {\n        return localStorage.getItem('isLogin')\n    },\n\n    logout() {\n        localStorage.removeItem('isLogin')\n    },\n\n    handleLogout()  {\n        axios({\n            method: 'get',\n            url: '/doLogout'\n        })\n        .then(res => {\n            localStorage.removeItem('isLogin')\n            hashHistory.push('/login')   \n        }).catch(err => {\n            console.log('logout err ', err)\n            localStorage.removeItem('isLogin')\n            hashHistory.push('/login')\n        })\n    }\n}","import React, { Component } from 'react';\nimport { Link, hashHistory } from 'react-router'\nimport './App.css';\nimport { getIsLogin } from '../auth'\nimport { Layout, Menu, Dropdown, Icon } from 'antd'\nimport axios from 'axios'\nimport { handleLogout } from '../auth'\n\nconst { Header, Content, Footer } = Layout\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLogin: false\n        }\n    }\n\n    componentWillMount() {\n        this.setState({ isLogin: getIsLogin() })\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ isLogin: getIsLogin() })\n    }\n\n    render() {\n        const { isLogin } = this.state\n        const accountMenu = isLogin ? (\n            <Menu>\n                <Menu.Item>\n                    <Link to=\"/profile\">个人资料</Link>\n                </Menu.Item>\n                <Menu.Item>\n                    <Link to=\"/\" onClick={handleLogout}>退出</Link>\n                </Menu.Item>\n            </Menu>\n        ) :\n            (\n                <Menu>\n                    <Menu.Item>\n                        <Link to=\"/login\">登录</Link>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Link to=\"/register\">注册</Link>\n                    </Menu.Item>\n                </Menu>\n            )\n\n        return (\n            <Layout>\n                <Header className=\"header\">\n                    <div className=\"logo\" />\n                    {isLogin ?\n                        <Menu\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                            defaultSelectedKeys={['2']}\n                            style={{ lineHeight: '64px' }}\n                        >\n                            <Menu.Item key=\"1\">\n                                <Link to='/log'>日志分析系统</Link>\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"2\">\n                                <Link to='/monitor'>服务器监控系统</Link>\n                            </Menu.Item> */}\n                            <Menu.Item key=\"3\">\n                                <Link to=\"/chat\">聊天系统</Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"4\" style={{ float: 'right' }}>\n                                <Dropdown overlay={accountMenu}>\n                                    <a className=\"ant-dropdown-link\" href=\"#\">\n                                        账户 <Icon type=\"down\" />\n                                    </a>\n                                </Dropdown>\n                            </Menu.Item>\n                        </Menu>\n                        :\n                        <Menu\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                            defaultSelectedKeys={['2']}\n                            style={{ lineHeight: '64px' }}\n                        >\n                            <Menu.Item key=\"3\" style={{ float: 'right' }}>\n                                <Dropdown overlay={accountMenu}>\n                                    <a className=\"ant-dropdown-link\" href=\"#\">\n                                        账户 <Icon type=\"down\" />\n                                    </a>\n                                </Dropdown>\n                            </Menu.Item>\n                        </Menu>\n                    }\n\n                </Header>\n                <Content style={{ padding: '50px 50px 0 50px' }}>\n                    {this.props.children}\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>\n                    Easy Ui ©2018 Created by yzxie\n            </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { Layout, Menu, Icon } from 'antd'\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nexport default class LogSider extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n      const { logTypeWithApps, changeActiveLogTypeAndApp } = this.props\n      \n      return <Sider width={200} style={{ background: '#fff' }}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          style={{ height: '100%' }}\n        >\n        {\n          logTypeWithApps && logTypeWithApps.map((logTypeApps, i) => (\n            <SubMenu key={i} title={<span><Icon type=\"user\" />{logTypeApps.logType}</span>}>\n            {\n              logTypeApps.apps.map((app, j) => (\n                <Menu.Item key={j} \n                  onClick={e => changeActiveLogTypeAndApp(logTypeApps.logType, app)}>\n                  {app}\n                </Menu.Item>\n              ))\n            }\n            </SubMenu>\n          ))\n        }\n          {/* <SubMenu key=\"sub2\" title={<span><Icon type=\"notification\" />热点股票</span>}>\n            <Menu.Item key=\"3\">美股</Menu.Item>\n            <Menu.Item key=\"4\">港股</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub3\" title={<span><Icon type=\"laptop\" />客户端统计</span>}>\n            <Menu.Item key=\"5\">Web</Menu.Item>\n            <Menu.Item key=\"6\">IOS</Menu.Item>\n            <Menu.Item key=\"7\">Android</Menu.Item>\n          </SubMenu> */}\n        </Menu>\n      </Sider>\n    }\n}","import React, { Component } from 'react'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport '../css/secondFlowChart.css'\n\nexport default class SecondFlowChart extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.drawCharts(this.props)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.drawCharts(nextProps)\n    }\n\n    drawCharts = props => {\n        const { logs } = props\n        if (logs != null) {\n            let xData = []\n            let yData = []\n            logs.map(log => {\n                xData.push(log.secondStamp)\n                yData.push(log.requestCount)\n            })\n            this.doDrawCharts(xData, yData)\n        }\n    }\n\n    doDrawCharts = (xData, yData) => {\n        let myChart = echarts.init(document.getElementById('charts'));\n        // 指定图表的配置项和数据\n        let option = {\n            title: {\n                text: '每秒访问量统计'\n            },\n            tooltip: {},\n            legend: {\n                data:['每秒访问量统计']\n            },\n            xAxis: {\n                data: xData\n            },\n            yAxis: {},\n            series: [{\n                name: '访问量',\n                type: 'bar',\n                data: yData\n            }]\n        };\n        // 使用刚指定的配置项和数据显示图表\n        myChart.setOption(option);\n    }\n\n    render() {\n        const { logs } = this.props\n        return <div>\n            <div id=\"charts\"></div>\n        </div>\n    }\n}","import React from 'react'\nimport SockJS from 'sockjs-client'\nimport Stomp from 'stompjs'\nimport PropTypes from 'prop-types'\nimport Lo from 'lodash'\n\n/**\n * React component for SockJS-client with STOMP messaging protocol.\n *\n * @version 4.0.0\n * @author [lahsivjar] (https://github.com/lahsivjar)\n * @see {@link https://stomp.github.io/|STOMP}\n * @see {@link https://github.com/sockjs/sockjs-client|StompJS}\n */\nclass SockJsClient extends React.Component {\n    static defaultProps = {\n        onConnect: () => { },\n        onDisconnect: () => { },\n        getRetryInterval: (count) => { return 1000 * count },\n        options: {},\n        headers: {},\n        subscribeHeaders: {},\n        autoReconnect: true,\n        debug: false,\n        heartbeat: 10000\n    }\n\n    static propTypes = {\n        /**\n         * HTTP URL of the endpoint to connect.\n         */\n        url: PropTypes.string.isRequired,\n        /**\n         * Additional options to pass to the underlying SockJS constructor.\n         *\n         * @see [SockJS-options](https://github.com/sockjs/sockjs-client#sockjs-client-api)\n         */\n        options: PropTypes.object,\n        /**\n         * Array of topics to subscribe to.\n         */\n        topics: PropTypes.array.isRequired,\n        /**\n         * Callback after connection is established.\n         */\n        onConnect: PropTypes.func,\n        /**\n         * Callback after connection is lost.\n         */\n        onDisconnect: PropTypes.func,\n        /**\n         * Gets called to find the time interval for next retry. Defaults to a function returing retryCount seconds.\n         *\n         * @param {number} retryCount number of retries for the current disconnect\n         */\n        getRetryInterval: PropTypes.func,\n        /**\n         * Callback when a message is recieved.\n         *\n         * @param {(string|Object)} msg message received from server, if JSON format then object\n         * @param {string} topic the topic on which the message was received\n         */\n        onMessage: PropTypes.func.isRequired,\n        /**\n         * Headers that will be passed to the server or broker with STOMP's connection frame.\n         */\n        headers: PropTypes.object,\n        /**\n         * Headers that will be passed when subscribing to a destination.\n         */\n        subscribeHeaders: PropTypes.object,\n        /**\n         * Should the client try to automatically connect in an event of disconnection.\n         */\n        autoReconnect: PropTypes.bool,\n        /**\n         * Enable debugging mode.\n         */\n        debug: PropTypes.bool,\n        /**\n         * Number of milliseconds to send and expect heartbeat messages.\n         */\n        heartbeat: PropTypes.number,\n        /**\n         * Number of milliseconds to expect heartbeat messages\n         */\n        heartbeatIncoming: PropTypes.number,\n        /**\n         * Number of milliseconds to send heartbeat messages\n         */\n        heartbeatOutgoing: PropTypes.number\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            connected: false,\n            // False if disconnect method is called without a subsequent connect\n            explicitDisconnect: false\n        }\n\n        this.subscriptions = new Map()\n        this.retryCount = 0\n    }\n\n    componentDidMount() {\n        this._connect()\n    }\n\n    componentWillUnmount() {\n        this.disconnect()\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.connected) {\n            // Subscribe to new topics\n            Lo.difference(nextProps.topics, this.props.topics)\n                .forEach((newTopic) => {\n                    this._log('Subscribing to topic: ' + newTopic)\n                    this._subscribe(newTopic)\n                })\n\n            // Unsubscribe from old topics\n            Lo.difference(this.props.topics, nextProps.topics)\n                .forEach((oldTopic) => {\n                    this._log('Unsubscribing from topic: ' + oldTopic)\n                    this._unsubscribe(oldTopic)\n                })\n        }\n    }\n\n    render() {\n        return null\n    }\n\n    _initStompClient = () => {\n        // Websocket held by stompjs can be opened only once\n        this.client = Stomp.over(new SockJS(this.props.url, null, this.props.options))\n\n        this.client.heartbeat.outgoing = this.props.heartbeat\n        this.client.heartbeat.incoming = this.props.heartbeat\n\n        if (Object.keys(this.props).includes('heartbeatIncoming')) {\n            this.client.heartbeat.incoming = this.props.heartbeatIncoming\n        }\n        if (Object.keys(this.props).includes('heartbeatOutgoing')) {\n            this.client.heartbeat.outgoing = this.props.heartbeatOutgoing\n        }\n        if (!this.props.debug) {\n            this.client.debug = () => { }\n        }\n    }\n\n    _cleanUp = () => {\n        this.setState({ connected: false })\n        this.retryCount = 0\n        this.subscriptions.clear()\n    }\n\n    _log = (msg) => {\n        if (this.props.debug) {\n            console.log(msg)\n        }\n    }\n\n    _subscribe = (topic) => {\n        if (!this.subscriptions.has(topic)) {\n            let sub = this.client.subscribe(topic, (msg) => {\n                this.props.onMessage(this._processMessage(msg.body), topic)\n            }, Lo.slice(this.props.subscribeHeaders))\n            this.subscriptions.set(topic, sub)\n        }\n    }\n\n    _processMessage = (msgBody) => {\n        try {\n            return JSON.parse(msgBody)\n        } catch (e) {\n            return msgBody\n        }\n    }\n\n    _unsubscribe = (topic) => {\n        let sub = this.subscriptions.get(topic)\n        sub.unsubscribe()\n        this.subscriptions.delete(topic)\n    }\n\n    _connect = () => {\n        this._initStompClient()\n        this.client.connect(this.props.headers, () => {\n            this.setState({ connected: true })\n            this.props.topics.forEach((topic) => {\n                this._subscribe(topic)\n            })\n            this.props.onConnect()\n        }, (error) => {\n            if (error) {\n                this._log(error.stack)\n                // 重新登录\n                if (this.props.handleLogout) {\n                    this.props.handleLogout()\n                    return\n                }\n            }\n            if (this.state.connected) {\n                this._cleanUp()\n                // onDisconnect should be called only once per connect\n                this.props.onDisconnect()\n            }\n            if (this.props.autoReconnect && !this.state.explicitDisconnect) {\n                this._timeoutId = setTimeout(this._connect, this.props.getRetryInterval(this.retryCount++))\n            }\n        })\n        console.log(\"ws connected.\")\n    }\n\n    /**\n     * Connect to the server if not connected. Under normal circumstances component\n     * will automatically try to connect to server. This method is mostly useful\n     * after component is explicitly disconnected via {@link SockJsClient#disconnect}.\n     *\n     * @public\n     */\n    connect = () => {\n        this.setState({ explicitDisconnect: false })\n        if (!this.state.connected) {\n            this._connect()\n        }\n    }\n\n    /**\n     * Disconnect STOMP client and disable all reconnect.\n     *\n     * @public\n     */\n    disconnect = () => {\n        // On calling disconnect explicitly no effort will be made to reconnect\n        // Clear timeoutId in case the component is trying to reconnect\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId)\n            this._timeoutId = null\n        }\n        this.setState({ explicitDisconnect: true })\n        if (this.state.connected) {\n            this.subscriptions.forEach((subid, topic) => {\n                this._unsubscribe(topic)\n            })\n            this.client.disconnect(() => {\n                this._cleanUp()\n                this.props.onDisconnect()\n                this._log('Stomp client is successfully disconnected!')\n            })\n        }\n    }\n\n    /**\n     * Send message to the specified topic.\n     *\n     * @param {string} topic target topic to send message\n     * @param {string} msg message to send\n     * @param {Object} [opt_headers={}] additional headers for underlying STOMP client\n     * @public\n     */\n    sendMessage = (topic, msg, opt_headers = {}) => {\n        if (this.state.connected) {\n            this.client.send(topic, opt_headers, msg)\n        } else {\n            throw new Error('Send error: SockJsClient is disconnected')\n        }\n    }\n}\n\nexport default SockJsClient","import React, { Component } from 'react'\nimport { hashHistory } from 'react-router'\nimport './css/index.css'\nimport { Layout } from 'antd'\nimport LogSider from './components/sider'\nimport SecondFlowChart from './components/secondFlowChart'\n//https://www.npmjs.com/package/react-stomp\nimport SockJsClient from '../../lib/sockJsClient'\nimport axios from 'axios'\nimport { logout, handleLogout } from '../../auth'\n\nconst { Content } = Layout\n\nexport default class LogIndex extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            logTypeWithApps: [],\n            appsLogs: {},\n            activeLogType: null,\n            activeLogApp: null\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"/log/list-apps\").then(res => {\n            let resData = res.data\n            if (resData.ret == 0) {\n                let data = resData.data\n                this.setState({\n                    logTypeWithApps: data\n                })\n            }\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    handleLogMessage = msg => {\n        let serverAppsLogs = msg.data || null\n        if (serverAppsLogs) {\n            // logType-appId: logs\n            let appsLogs = {}\n            for (let index in serverAppsLogs) {\n                let item = serverAppsLogs[index]\n                let key = item.logType + '-' + item.app\n                let value = item.data\n                appsLogs[key] = value\n            }\n            this.setState({\n                appsLogs: appsLogs\n            })\n            console.log('appLogs: ', this.state.appsLogs)\n        }\n    }\n\n    changeActiveLogTypeAndApp = (logType, appId) => {\n        this.setState({\n            activeLogType: logType,\n            activeLogApp: appId\n        })\n    }\n\n    activeDisplayLogs = () => {\n        const { appsLogs, activeLogType, activeLogApp } = this.state\n        let key = activeLogType + '-' + activeLogApp\n        return appsLogs ? appsLogs[key] : null\n    }\n\n    render() {\n        const { logTypeWithApps, activeLogType, activeLogApp } = this.state\n        const displayLogs = this.activeDisplayLogs()\n\n        return (\n            <Layout style={{ padding: '24px 0', background: '#fff' }}>\n                <LogSider logTypeWithApps={logTypeWithApps} \n                    changeActiveLogTypeAndApp={this.changeActiveLogTypeAndApp} />\n                <Content style={{ padding: '0 24px', minHeight: \"-webkit-fill-available\" }}>\n                {\n                    activeLogType && activeLogApp && <div>\n                        <div>日志类型：{activeLogType}, 应用: {activeLogApp}</div>\n                        { displayLogs ? <SecondFlowChart logs={displayLogs} /> : 'No data' }\n                    </div>\n                }\n                </Content>\n                <SockJsClient\n                    url='http://localhost:8088/broadcastEndPoint'\n                    topics={['/topic/logMessage']}\n                    onDisconnect={() => console.log(\"ws disconnect\")}\n                    handleLogout={handleLogout}\n                    onMessage={this.handleLogMessage}\n                    ref={client => { this.gropClientRef = client }} />\n            </Layout>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Layout, Menu, Icon } from 'antd'\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nexport default class MonitorSider extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return <Sider width={200} style={{ background: '#fff' }}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          style={{ height: '100%' }}\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" />CPU</span>}>\n            <Menu.Item key=\"1\">实时</Menu.Item>\n            <Menu.Item key=\"2\">峰值统计</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"laptop\" />内存</span>}>\n            <Menu.Item key=\"3\">实时</Menu.Item>\n            <Menu.Item key=\"4\">峰值统计</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub3\" title={<span><Icon type=\"notification\" />磁盘</span>}>\n            <Menu.Item key=\"5\">实时</Menu.Item>\n            <Menu.Item key=\"6\">峰值统计</Menu.Item>\n          </SubMenu>\n          <SubMenu key=\"sub4\" title={<span><Icon type=\"notification\" />IO</span>}>\n            <Menu.Item key=\"7\">实时</Menu.Item>\n            <Menu.Item key=\"8\">峰值统计</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </Sider>\n    }\n}","import React, { Component } from 'react'\nimport { Layout } from 'antd'\nimport MonitorSider from './components/sider'\nconst { Content } = Layout\n\nexport default class MonitorIndex extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <Layout style={{ padding: '24px 0', background: '#fff' }}>\n                <MonitorSider />\n                <Content style={{ padding: '0 24px', minHeight: \"-webkit-fill-available\" }}>\n                    <div>\n                        MonitorApp\n                    </div>\n                </Content>\n            </Layout>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Layout, Menu, Icon } from 'antd'\nconst { SubMenu } = Menu\nconst { Sider } = Layout\n\nexport default class ChatSider extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            \n        }\n    }\n\n    render() {\n        const { onlines, offlines, chatWith } = this.props\n\n        return <Sider width={200} style={{ background: '#fff' }}>\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={['1']}\n          defaultOpenKeys={['sub1']}\n          style={{ height: '100%' }}\n        >\n          <SubMenu key=\"sub1\" title={<span><Icon type=\"user\" style={{ color: '#87d068' }}/>在线好友</span>}>\n            {\n                onlines && onlines.map((online, i) => (\n                    <Menu.Item key={i} onClick={e => chatWith(online)}>\n                        {online.name}\n                    </Menu.Item>\n                ))\n            }\n          </SubMenu>\n          <SubMenu key=\"sub2\" title={<span><Icon type=\"user\" />离线好友</span>}>\n            {\n                offlines && offlines.map((offline, i) => (\n                  <Menu.Item key={`${i}-${offline.id}`}>{offline.name}</Menu.Item>\n                ))\n            }\n          </SubMenu>\n        </Menu>\n      </Sider>\n    }\n}","import React, { Component } from 'react'\nimport { Layout, Button, Input, Row, Col, Avatar } from 'antd'\nimport ChatSider from './components/sider'\n//https://www.npmjs.com/package/react-stomp\nimport SockJsClient from 'react-stomp'\n\nconst { TextArea } = Input\nconst { Content } = Layout\n\nexport default class ChatApp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            onlines: [{ name: 'xieyizun', id: 1 }],\n            offlines: [{ name: 'liyu', id: 2 }],\n            chatTo: null,\n            groupMessage: null\n        }\n    }\n\n    handleGroupMessageReceived = msg => {\n        this.setState({\n            groupMessageReceived: msg.content\n        })\n    }\n\n    handleChatReceived = msg => {\n        this.setState({\n            p2pChatMessageReceived: msg.content\n        })\n    }\n\n    sendGroupMessage = () => {\n        const { groupMessage } = this.state\n        if (groupMessage) {\n            let data = JSON.stringify({ content: groupMessage })\n            this.gropClientRef.sendMessage('/app/groupMessage', data, {})\n        }\n    }\n\n    sendP2pChatMessage = content => {\n        const { chatTo } = this.state\n        if (chatTo.content) {\n            let msg = { content: chatTo.content, userName: chatTo.name }\n            this.p2pChatClientRef.sendMessage('/app/chat', JSON.stringify(msg))\n        }\n    }\n\n    chatWith = user => {\n        this.setState({\n            chatTo: user\n        })\n    }\n\n    inputP2pChatMessage = e => {\n        let { chatTo } = this.state\n        chatTo['content'] = e.target.value\n        this.setState({chatTo: chatTo})\n    }\n\n    inputGroupMessage = e => {\n        this.setState({groupMessage: e.target.value})\n    }\n\n    render() {\n        const { groupMessageReceived, p2pChatMessageReceived, offlines, onlines, chatTo } = this.state\n        \n        return (\n            <Layout style={{ padding: '24px 0', background: '#fff' }}>\n                <ChatSider\n                    onlines={onlines}\n                    offlines={offlines}\n                    chatWith={this.chatWith}\n                />\n                <Content style={{ padding: '0 24px', minHeight: \"-webkit-fill-available\" }}>\n                    <div>\n                        <Row gutter={16}>\n                            { chatTo ? <Col span={12}>\n                                <div>\n                                    正在与{chatTo.name}聊天中\n                                </div>\n                                <TextArea \n                                    placeholder=\"输入聊天信息\" \n                                    autosize={{ minRows: 6, maxRows: 10 }}\n                                    onChange={this.inputP2pChatMessage} />\n                                <Button \n                                    onClick={this.sendP2pChatMessage} \n                                    style={{ color: '#87d068', margin: '10px 0' }}>发送</Button>\n                                <div>聊天信息: {p2pChatMessageReceived}</div>\n\n                                <SockJsClient\n                                    url=\"http://localhost:8088/p2pEndPoint\"\n                                    topics={['/user/queue/chat']}\n                                    onMessage={this.handleChatReceived}\n                                    ref={client => { this.p2pChatClientRef = client }}\n                                />\n                            </Col> : null }\n                            <Col span={12}>\n                                <div>群聊中</div>\n                                <TextArea \n                                    placeholder=\"输入群聊信息\" \n                                    autosize={{ minRows: 6, maxRows: 10 }}\n                                    onChange={this.inputGroupMessage} />\n                                <Button \n                                    onClick={this.sendGroupMessage} \n                                    style={{ color: '#87d068', margin: '10px 0' }}>群聊</Button>\n                                <div>群聊消息: {groupMessageReceived}</div>\n\n                                <SockJsClient\n                                    url='http://localhost:8088/broadcastEndPoint'\n                                    topics={['/topic/broadcastMessage']}\n                                    onMessage={this.handleGroupMessageReceived}\n                                    ref={client => { this.gropClientRef = client }} />\n                            </Col>\n                        </Row>\n                    </div>\n                </Content>\n            </Layout>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { hashHistory } from 'react-router'\nimport { Form, Icon, Input, Button, Checkbox } from 'antd'\nimport { Link } from 'react-router'\nimport axios from 'axios'\nimport { login } from '../../auth'\nimport './Login.css'\nconst FormItem = Form.Item\n\nclass NormalLoginForm extends Component {\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values)\n                axios({\n                    method: 'post',\n                    url: '/login',\n                    data: values\n                }).then(response => {\n                    console.log(response)\n                    login()\n                    hashHistory.push('/')\n                }).catch(err => {\n                    console.log(err)\n                })\n            }\n        })\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form\n        return (\n            <div className=\"components-form-normal-login\">\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <FormItem>\n                        {getFieldDecorator('name', {\n                            rules: [{ required: true, message: '请输入用户名或邮箱' }],\n                        })(\n                            <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"用户名或密码\" />\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('password', {\n                            rules: [{ required: true, message: '请输入密码' }],\n                        })(\n                            <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"密码\" />\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('remember', {\n                            valuePropName: 'checked',\n                            initialValue: true,\n                        })(\n                            <Checkbox>记住我</Checkbox>\n                        )}\n                        <a className=\"login-form-forgot\" href=\"\">忘记密码</a>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            登录\n                    </Button>\n                        或 <Link to='/register'>注册</Link>\n                    </FormItem>\n                </Form>\n            </div>\n        )\n    }\n}\n\nconst WrappedNormalLoginForm = Form.create()(NormalLoginForm)\nexport default WrappedNormalLoginForm\n","import React, { Component } from 'react'\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd'\nimport './Register.css'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\nconst AutoCompleteOption = AutoComplete.Option\nconst residences = [{\n    value: 'guangdong',\n    label: '广东',\n    children: [{\n        value: 'guangzhou',\n        label: '广州',\n        children: [{\n            value: 'tianhe',\n            label: '天河',\n        }],\n    }],\n}, {\n    value: 'jiangsu',\n    label: '江苏',\n    children: [{\n        value: 'nanjing',\n        label: '南京',\n        children: [{\n            value: 'zhonghuamen',\n            label: '中华门',\n        }],\n    }],\n}]\n\nclass RegistrationForm extends Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values)\n            }\n        })\n    }\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value })\n    }\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!')\n        } else {\n            callback()\n        }\n    }\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true })\n        }\n        callback()\n    }\n\n    handleWebsiteChange = (value) => {\n        let autoCompleteResult\n        if (!value) {\n            autoCompleteResult = []\n        } else {\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`)\n        }\n        this.setState({ autoCompleteResult })\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form\n        const { autoCompleteResult } = this.state\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        }\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        }\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '86',\n        })(\n            <Select style={{ width: 70 }}>\n                <Option value=\"86\">+86</Option>\n                <Option value=\"87\">+87</Option>\n            </Select>\n        )\n\n        const websiteOptions = autoCompleteResult.map(website => (\n            <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n        ))\n\n        return (\n            <div className=\"components-form-normal-register\">\n                <Form onSubmit={this.handleSubmit}>\n                    <FormItem\n                        {...formItemLayout}\n                        label={(\n                            <span>\n                                用户名\n                            </span>\n                        )}\n                    >\n                        {getFieldDecorator('nickname', {\n                            rules: [{ required: true, message: '请输入用户名', whitespace: true }],\n                        })(\n                            <Input />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"邮箱\"\n                    >\n                        {getFieldDecorator('email', {\n                            rules: [{\n                                type: 'email', message: '邮箱不合法',\n                            }, {\n                                required: true, message: '请输入邮箱',\n                            }],\n                        })(\n                            <Input />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"密码\"\n                    >\n                        {getFieldDecorator('password', {\n                            rules: [{\n                                required: true, message: '请输入密码',\n                            }, {\n                                validator: this.validateToNextPassword,\n                            }],\n                        })(\n                            <Input type=\"password\" />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"确认密码\"\n                    >\n                        {getFieldDecorator('confirm', {\n                            rules: [{\n                                required: true, message: '请确认密码',\n                            }, {\n                                validator: this.compareToFirstPassword,\n                            }],\n                        })(\n                            <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"所在地\"\n                    >\n                        {getFieldDecorator('residence', {\n                            initialValue: ['广东', '广州', '天河'],\n                            rules: [{ type: 'array', required: true, message: '请选择所在地' }],\n                        })(\n                            <Cascader options={residences} />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"手机号码\"\n                    >\n                        {getFieldDecorator('phone', {\n                            rules: [{ required: true, message: '请输入手机号码' }],\n                        })(\n                            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label={(\n                            <span>\n                                个人网站\n                                 <Tooltip title=\"也可以是个人github\">\n                                    <Icon type=\"question-circle-o\" />\n                                </Tooltip>\n                            </span>\n                        )}\n                    >\n                        {getFieldDecorator('website', {\n                            rules: [{ required: true, message: '请输入个人网站' }],\n                        })(\n                            <AutoComplete\n                                dataSource={websiteOptions}\n                                onChange={this.handleWebsiteChange}\n                                placeholder=\"网址\"\n                            >\n                                <Input />\n                            </AutoComplete>\n                        )}\n                    </FormItem>\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"校验码\"\n                        extra=\"确认非机器人操作\"\n                    >\n                        <Row gutter={8}>\n                            <Col span={12}>\n                                {getFieldDecorator('captcha', {\n                                    rules: [{ required: true, message: '请输入校验码' }],\n                                })(\n                                    <Input />\n                                )}\n                            </Col>\n                            <Col span={12}>\n                                <Button>获取校验码</Button>\n                            </Col>\n                        </Row>\n                    </FormItem>\n                    <FormItem {...tailFormItemLayout}>\n                        {getFieldDecorator('agreement', {\n                            valuePropName: 'checked',\n                        })(\n                            <Checkbox>我已经阅读过 <a href=\"\">用户须知</a></Checkbox>\n                        )}\n                    </FormItem>\n                    <FormItem {...tailFormItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\">注册</Button>\n                    </FormItem>\n                </Form>\n            </div>\n        )\n    }\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm)\nexport default WrappedRegistrationForm\n","import React, { Component } from 'react'\nimport { Layout } from 'antd'\nimport axios from 'axios'\nconst { Content } = Layout\n\nexport default class Profile extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userInfo: {}\n        }\n    }\n\n    componentWillMount() {\n        axios({\n            method: 'get',\n            url: '/user/xieyizun',\n            data: {}\n        }).then(res => {\n            const { data } = res.data\n            console.log('profile: ', data)\n            this.setState({\n                userInfo: data.userInfo\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render () {\n        const { userInfo } = this.state || {}\n\n        return (\n            <Layout style={{ padding: '24px 0', background: '#fff' }}>\n                <Content style={{ padding: '0 24px', minHeight: \"-webkit-fill-available\" }}>\n                    { userInfo ? <div>\n                        name: {userInfo.name}\n                        email: {userInfo.email}\n                    </div> : null }\n                </Content>\n            </Layout>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Router, Link, Route, hashHistory } from 'react-router';\nimport './App.css';\nimport App from './App'\nimport LogApp from './log-app/index'\nimport MonitorApp from './monitor-app/index'\nimport ChatApp from './chat-app/index'\n\nimport Login from './common/Login'\nimport Register from './common/Register'\nimport Profile from './common/Profile'\nimport { getIsLogin } from '../auth'\n\nclass Index extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLogin: false\n        }\n    }\n\n    componentWillMount() {\n        this.setState({isLogin: getIsLogin()})\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({isLogin: getIsLogin()})\n    }\n\n    requiredLogin = () => {\n        const { isLogin } = this.state || {}\n        if (isLogin) {\n            return true\n        } else {\n            // 先再读取一次\n            if (getIsLogin()) {\n                this.setState({isLogin: true})\n                return true\n            }\n            hashHistory.push('/login')\n        }\n    }\n\n    requiredNotLogin = () => {\n        const { isLogin } = this.state || {}\n        if (isLogin) {\n            hashHistory.push('/')\n        } else {\n            return true\n        }\n    }\n\n    render() {\n        return (\n            <Router history={hashHistory}>\n              <Route path=\"/\" component={App}>\n                  <Route path=\"/log\" component={LogApp} onEnter={this.requiredLogin}></Route>\n                  <Route path=\"/monitor\" component={MonitorApp} onEnter={this.requiredLogin}></Route>\n                  <Route path=\"/profile\" component={Profile} onEnter={this.requiredLogin}></Route>\n                  <Route path=\"/chat\" component={ChatApp} onEnter={this.requiredLogin}></Route>\n\n                  <Route path='/login' component={Login} onEnter={this.requiredNotLogin}></Route>\n                  <Route path='/register' component={Register} onEnter={this.requiredNotLogin}></Route>\n              </Route>       \n            </Router>\n          );\n    }\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './apps/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}